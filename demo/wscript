import os.path as osp

def options(opt):
    opt.add_option('--with-avro', default=None,
                   help='Set to AVRO install area')
    opt.add_option('--with-moo', default=None,
                   help='Set to moo install area')

def configure(cfg):
    moo = getattr(cfg.options, 'with_moo', None)
    if moo:
        cfg.env.PATH_MOO = [osp.join(moo),'bin']
    cfg.find_program('moo', var='MOO', define_name='HAVE_MOO',
                     mandatory=False)

    avro = getattr(cfg.options, 'with_avro',None)
    if avro:
        setattr(cfg.env, 'PATH_AVRO', [osp.join(avro, 'bin')]);
        setattr(cfg.env, 'RPATH_AVRO', [osp.join(avro, 'lib')]);
        setattr(cfg.env, 'LIBPATH_AVRO', [osp.join(avro, 'lib')]);
        setattr(cfg.env, 'INCLUDES_AVRO', [osp.join(avro, 'include')]);

    cfg.check(features='cxx cxxprogram', define_name='HAVE_AVRO',
              header='avro/Config.hh', lib=['avrocpp'],
              use='AVRO', uselib_store='AVRO', mandatory=False)

    cfg.find_program('avrogencpp', var='AVROGENCPP', use='AVRO', mandatory=False)

    cfg.env.SKIP_DEMO=False
    if not cfg.env.HAVE_AVRO:
        cfg.env.SKIP_DEMO=True
    if not cfg.env.MOO:
        cfg.env.SKIP_DEMO=True
    if cfg.env.SKIP_DEMO:
        print("Demo requirements not met, we will skip building it")

def build(bld):
    if bld.env.SKIP_DEMO: return

    # Note, because waf is Python, we can directly make tasks to run
    # moo code.  See the moo package for examples.  As it is
    # anticipated that lesser build systems will be used, we stick to
    # calling the "moo" CLI.

    schemas = ['node', 'comp']
    for schema in schemas:
        # avro
        snode = bld.path.find_resource(schema + ".jsonnet")

        avroj = snode.change_ext('_avro.json')
        avroh = snode.change_ext('_avro.hpp')
        bld(rule="${MOO} compile -P avro ${SRC} > ${TGT}", shell=True,
            source=snode, target=avroj)
        bld(rule="${AVROGENCPP} -n demo -i ${SRC} -o ${TGT}",
            source=avroj, target=avroh)

        nljst = bld.path.find_resource("avro_nljs.hpp.j2")
        nljsh = snode.change_ext('_nljs.hpp')
        bld(rule="${MOO} render -P nljs ${SRC} > ${TGT}", shell=True,
            source=[snode, nljst], target=nljsh)

    srcs=bld.path.ant_glob("*.cpp")
    bld.program(features = 'cxx',
                includes = '../inc',
                source = srcs,
                target = 'cogs-demo',
                rpath = [bld.env.LIBDIR],
                use = ['cogs','ERS','NLJS','AVRO'])
    #print (bld.env)
